name: Terraform - Production

on:
  push:
    branches:
      - main
    paths:
      - finalProject/network/**
      - finalProject/webservers/**

  pull_request:
    branches:
      - main
    paths: 
      - finalProject/network/**
      - finalProject/webservers/**

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production
    env:
      GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET}}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION}}
     
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.9

      - name: Terraform fmt - network
        id: fmt_network
        run: terraform fmt
        continue-on-error: true
        working-directory: ./finalProject/network

      - name: Terraform Init - network
        id: init_network
        run: terraform init
        working-directory: ./finalProject/network

      - name: Terraform Validate - network
        id: validate_network
        run: terraform validate -no-color
        working-directory: ./finalProject/network

      - name: Terraform Plan - network
        id: plan_network
        run: terraform plan -input=false -no-color -out=tf_network.plan
        working-directory: ./finalProject/network
        continue-on-error: true

      - name: Terraform fmt - webservers
        id: fmt_webservers
        run: terraform fmt
        continue-on-error: true
        working-directory: ./finalProject/webservers

      - name: Terraform Init - webservers
        id: init_webservers
        run: terraform init
        working-directory: ./finalProject/webservers

      - name: Terraform Validate - webservers
        id: validate_webservers
        run: terraform validate -no-color
        working-directory: ./finalProject/webservers

      - name: Terraform Plan - webservers
        id: plan_webservers
        run: terraform plan -input=false -no-color -out=tf_webservers.plan
        working-directory: ./finalProject/webservers
        continue-on-error: true

      - name: Get network plan result
        run: echo "${{ steps.plan_network.outputs.stdout }}"

      - name: Terraform Show - network
        id: show_network
        run: terraform show -no-color tf_network.plan > /tmp/network_plan.txt
        working-directory: ./finalProject/network

      - name: Get webservers plan result
        run: echo "${{ steps.plan_webservers.outputs.stdout }}"

      - name: Terraform Show - webservers
        id: show_webservers
        run: terraform show -no-color tf_webservers.plan > /tmp/webservers_plan.txt
        working-directory: ./finalProject/webservers

      - name: Terraform Apply
        if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
        run: terraform apply -auto-approve tf.plan
        working-directory: ./staging # Use your environment folder
        shell: bash

    
